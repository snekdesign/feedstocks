From ba67283784437c7c3c1aec15824397c5f8ae0828 Mon Sep 17 00:00:00 2001
From: snekdesign <104812819+snekdesign@users.noreply.github.com>
Date: Thu, 20 Feb 2025 18:55:09 +0800
Subject: [PATCH] customize

---
 Cargo.toml                           | 24 ++++++++++++------------
 crates/pixi-build-backend/src/cli.rs | 21 +++++++++++++++------
 2 files changed, 27 insertions(+), 18 deletions(-)

diff --git a/Cargo.toml b/Cargo.toml
index 32d749b..babc281 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -53,17 +53,12 @@ pixi_build_type_conversions = { version = "*" }
 pixi-build-backend = { path = "crates/pixi-build-backend" }
 
 [patch.crates-io]
-pixi_build_types = { git = "https://github.com/prefix-dev/pixi", branch = "main" }
-pixi_consts = { git = "https://github.com/prefix-dev/pixi", branch = "main" }
-pixi_manifest = { git = "https://github.com/prefix-dev/pixi", branch = "main" }
-pixi_spec = { git = "https://github.com/prefix-dev/pixi", branch = "main" }
-pixi_build_type_conversions = { git = "https://github.com/prefix-dev/pixi", branch = "main" }
 
-#pixi_build_types = { path = "../pixi/crates/pixi_build_types" }
-#pixi_consts = { path = "../pixi/crates/pixi_consts" }
-#pixi_manifest = { path = "../pixi/crates/pixi_manifest" }
-#pixi_spec = { path = "../pixi/crates/pixi_spec" }
-#pixi_build_type_conversions = { path = "../pixi/crates/pixi_build_type_conversions" }
+pixi_build_types = { path = "../pixi/crates/pixi_build_types" }
+pixi_consts = { path = "../pixi/crates/pixi_consts" }
+pixi_manifest = { path = "../pixi/crates/pixi_manifest" }
+pixi_spec = { path = "../pixi/crates/pixi_spec" }
+pixi_build_type_conversions = { path = "../pixi/crates/pixi_build_type_conversions" }
 
 #rattler_cache = { path = "../rattler/crates/rattler_cache" }
 #rattler_conda_types = { path = "../rattler/crates/rattler_conda_types" }
@@ -72,5 +67,10 @@ pixi_build_type_conversions = { git = "https://github.com/prefix-dev/pixi", bran
 #rattler_repodata_gateway = { path = "../rattler/crates/rattler_repodata_gateway" }
 #simple_spawn_blocking = { path = "../rattler/crates/simple_spawn_blocking" }
 
-rattler-build = { git = "https://github.com/prefix-dev/rattler-build", branch = "main" }
-#rattler-build = { path = "../rattler-build" }
+rattler-build = { path = "../rattler-build" }
+
+[profile.release]
+codegen-units = 1
+lto = true
+opt-level = 3
+strip = true
diff --git a/crates/pixi-build-backend/src/cli.rs b/crates/pixi-build-backend/src/cli.rs
index 1521233..f021e11 100644
--- a/crates/pixi-build-backend/src/cli.rs
+++ b/crates/pixi-build-backend/src/cli.rs
@@ -17,6 +17,7 @@ use rattler_conda_types::{ChannelConfig, GenericVirtualPackage, Platform};
 use rattler_virtual_packages::{VirtualPackage, VirtualPackageOverrides};
 use tempfile::TempDir;
 use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};
+use url::Url;
 
 use crate::{
     consts,
@@ -171,12 +172,16 @@ async fn conda_get_metadata<T: ProtocolInstantiator>(
     manifest_path: &Path,
     host_platform: Option<Platform>,
 ) -> miette::Result<CondaMetadataResult> {
-    let channel_config = ChannelConfig::default_with_root_dir(
-        manifest_path
+    let channel_config = ChannelConfig {
+        channel_alias: std::env::var("RATTLER_BUILD_CHANNEL_ALIAS").map_or_else(
+                |_| Url::parse("https://conda.anaconda.org"),
+                |v| Url::parse(v.as_str()),
+            ).unwrap(),
+        root_dir: manifest_path
             .parent()
             .expect("manifest should always reside in a directory")
             .to_path_buf(),
-    );
+    };
 
     let protocol = initialize(factory, manifest_path).await?;
 
@@ -219,12 +224,16 @@ async fn capabilities<Factory: ProtocolInstantiator>() -> miette::Result<Backend
 
 /// Frontend implementation for building a conda package.
 async fn build<T: ProtocolInstantiator>(factory: T, manifest_path: &Path) -> miette::Result<()> {
-    let channel_config = ChannelConfig::default_with_root_dir(
-        manifest_path
+    let channel_config = ChannelConfig {
+        channel_alias: std::env::var("RATTLER_BUILD_CHANNEL_ALIAS").map_or_else(
+                |_| Url::parse("https://conda.anaconda.org"),
+                |v| Url::parse(v.as_str()),
+            ).unwrap(),
+        root_dir: manifest_path
             .parent()
             .expect("manifest should always reside in a directory")
             .to_path_buf(),
-    );
+    };
 
     let protocol = initialize(factory, manifest_path).await?;
     let work_dir = TempDir::new_in(".")
-- 

