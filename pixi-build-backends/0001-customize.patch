From ba67283784437c7c3c1aec15824397c5f8ae0828 Mon Sep 17 00:00:00 2001
From: snekdesign <104812819+snekdesign@users.noreply.github.com>
Date: Thu, 20 Feb 2025 18:55:09 +0800
Subject: [PATCH] customize

---
 Cargo.toml                                    | 32 +++++-----
 crates/pixi-build-backend/Cargo.toml          |  2 +
 .../src/intermediate_backend.rs               | 52 +++++++++++++++++
 crates/pixi-build-rattler-build/Cargo.toml    |  2 +
 .../pixi-build-rattler-build/src/protocol.rs  | 58 ++++++++++++++++---
 5 files changed, 124 insertions(+), 22 deletions(-)

diff --git a/Cargo.toml b/Cargo.toml
index f34ab30..cb966d9 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -55,16 +55,18 @@ jsonrpc-stdio-server = "18.0.0"
 jsonrpc-http-server = "18.0.0"
 jsonrpc-core = "18.0.0"
 
-rattler-build = { git = "https://github.com/prefix-dev/rattler-build", branch = "main", default-features = false, features = [
+rattler-build = { path = "../rattler-build", default-features = false, features = [
   "rustls-tls",
 ] }
 
 rattler_conda_types = { version = "0.39.0", default-features = false }
+rattler_config = { version = "0.2.8", default-features = false }
 rattler_digest = { version = "1.1.5", default-features = false }
 rattler_package_streaming = { version = "0.23.1", default-features = false }
 rattler_virtual_packages = { version = "2.1.3", default-features = false }
 
 pixi_build_types = { version = "*" }
+pixi_config = { version = "*" }
 pixi_consts = { version = "*" }
 pixi_manifest = { version = "*" }
 pixi_spec = { version = "*" }
@@ -77,17 +79,15 @@ recipe-stage0 = { path = "crates/recipe-stage0" }
 
 
 [patch.crates-io]
-pixi_build_types = { git = "https://github.com/prefix-dev/pixi", branch = "main" }
-pixi_consts = { git = "https://github.com/prefix-dev/pixi", branch = "main" }
-pixi_manifest = { git = "https://github.com/prefix-dev/pixi", branch = "main" }
-pixi_spec = { git = "https://github.com/prefix-dev/pixi", branch = "main" }
-pixi_build_type_conversions = { git = "https://github.com/prefix-dev/pixi", branch = "main" }
-
-#pixi_build_types = { path = "../pixi/crates/pixi_build_types" }
-#pixi_consts = { path = "../pixi/crates/pixi_consts" }
-#pixi_manifest = { path = "../pixi/crates/pixi_manifest" }
-#pixi_spec = { path = "../pixi/crates/pixi_spec" }
-#pixi_build_type_conversions = { path = "../pixi/crates/pixi_build_type_conversions" }
+pixi_build_types = { path = "../pixi/crates/pixi_build_types" }
+pixi_config = { path = "../pixi/crates/pixi_config" }
+pixi_consts = { path = "../pixi/crates/pixi_consts" }
+pixi_manifest = { path = "../pixi/crates/pixi_manifest" }
+pixi_spec = { path = "../pixi/crates/pixi_spec" }
+pixi_build_type_conversions = { path = "../pixi/crates/pixi_build_type_conversions" }
+reqwest-middleware = { path = "../reqwest-middleware/reqwest-middleware" }
+reqwest-retry = { path = "../reqwest-middleware/reqwest-retry" }
+version-ranges = { path = "../pubgrub/version-ranges" }
 
 #rattler_cache = { path = "../rattler/crates/rattler_cache" }
 #rattler_conda_types = { path = "../rattler/crates/rattler_conda_types" }
@@ -99,9 +99,11 @@ pixi_build_type_conversions = { git = "https://github.com/prefix-dev/pixi", bran
 #[patch."https://github.com/prefix-dev/rattler-build"]
 #rattler-build = { path = "../rattler-build/" }
 
-[profile.dev.package]
-insta.opt-level = 3
-similar.opt-level = 3
+[profile.release]
+codegen-units = 1
+lto = true
+opt-level = 3
+strip = true
 
 [profile.ci]
 codegen-units = 16
diff --git a/crates/pixi-build-backend/Cargo.toml b/crates/pixi-build-backend/Cargo.toml
index e364de4..ae169a8 100644
--- a/crates/pixi-build-backend/Cargo.toml
+++ b/crates/pixi-build-backend/Cargo.toml
@@ -18,6 +18,7 @@ miette = { workspace = true }
 minijinja = { workspace = true }
 parking_lot = { workspace = true }
 rattler_conda_types = { workspace = true }
+rattler_config = { workspace = true }
 rattler_package_streaming = { workspace = true }
 rattler_virtual_packages = { workspace = true }
 rattler-build = { workspace = true }
@@ -39,6 +40,7 @@ pathdiff = { workspace = true }
 thiserror = { workspace = true }
 
 pixi_build_types = { workspace = true }
+pixi_config = { workspace = true }
 pixi_consts = { workspace = true }
 pixi_manifest = { workspace = true }
 pixi_spec = { workspace = true }
diff --git a/crates/pixi-build-backend/src/intermediate_backend.rs b/crates/pixi-build-backend/src/intermediate_backend.rs
index f3b3e7a..77030b1 100644
--- a/crates/pixi-build-backend/src/intermediate_backend.rs
+++ b/crates/pixi-build-backend/src/intermediate_backend.rs
@@ -342,6 +342,31 @@ where
             &selector_config_for_variants,
         )?;
 
+        let base_client = {
+            let config = pixi_config::Config::load_global();
+            let mut config_base = rattler_config::config::ConfigBase::default();
+            config_base.mirrors.extend(config.mirrors.into_iter());
+            config_base.s3_options.0.extend(
+                config.s3_options.into_iter().map(move |(k, v)| {
+                    (k, rattler_config::config::s3::S3Options {
+                        endpoint_url: v.endpoint_url,
+                        region: v.region,
+                        force_path_style: v.force_path_style,
+                    })
+                })
+            );
+            let common = rattler_build::opt::CommonData::from_opts_and_config(
+                rattler_build::opt::CommonOpts::default(),
+                config_base,
+            );
+            rattler_build::tool_configuration::reqwest_client_from_auth_storage(
+                None,
+                common.s3_config,
+                common.mirror_config,
+                None,
+            ).into_diagnostic()?
+        };
+
         // Build the tool configuration
         let tool_config = Arc::new(
             Configuration::builder()
@@ -350,6 +375,7 @@ where
                 .with_channel_config(channel_config)
                 .with_testing(false)
                 .with_keep_build(true)
+                .with_reqwest_client(base_client)
                 .finish(),
         );
 
@@ -644,6 +670,31 @@ where
             &selector_config_for_variants,
         )?;
 
+        let base_client = {
+            let config = pixi_config::Config::load_global();
+            let mut config_base = rattler_config::config::ConfigBase::default();
+            config_base.mirrors.extend(config.mirrors.into_iter());
+            config_base.s3_options.0.extend(
+                config.s3_options.into_iter().map(move |(k, v)| {
+                    (k, rattler_config::config::s3::S3Options {
+                        endpoint_url: v.endpoint_url,
+                        region: v.region,
+                        force_path_style: v.force_path_style,
+                    })
+                })
+            );
+            let common = rattler_build::opt::CommonData::from_opts_and_config(
+                rattler_build::opt::CommonOpts::default(),
+                config_base,
+            );
+            rattler_build::tool_configuration::reqwest_client_from_auth_storage(
+                None,
+                common.s3_config,
+                common.mirror_config,
+                None,
+            ).into_diagnostic()?
+        };
+
         // Build the tool configuration
         let tool_config = Arc::new(
             Configuration::builder()
@@ -652,6 +703,7 @@ where
                 .with_channel_config(channel_config)
                 .with_testing(false)
                 .with_keep_build(true)
+                .with_reqwest_client(base_client)
                 .finish(),
         );
 
diff --git a/crates/pixi-build-rattler-build/Cargo.toml b/crates/pixi-build-rattler-build/Cargo.toml
index 5ede731..6a18c2a 100644
--- a/crates/pixi-build-rattler-build/Cargo.toml
+++ b/crates/pixi-build-rattler-build/Cargo.toml
@@ -8,6 +8,7 @@ async-trait = { workspace = true }
 fs-err = { workspace = true }
 miette = { workspace = true }
 rattler_conda_types = { workspace = true }
+rattler_config = { workspace = true }
 rattler_virtual_packages = { workspace = true }
 rattler-build = { workspace = true }
 serde = { workspace = true, features = ["derive"] }
@@ -21,6 +22,7 @@ itertools = { workspace = true }
 pixi-build-backend = { workspace = true }
 
 pixi_build_types = { workspace = true }
+pixi_config = { workspace = true }
 chrono = "0.4.41"
 
 [dev-dependencies]
diff --git a/crates/pixi-build-rattler-build/src/protocol.rs b/crates/pixi-build-rattler-build/src/protocol.rs
index b6e445c..96ffc7c 100644
--- a/crates/pixi-build-rattler-build/src/protocol.rs
+++ b/crates/pixi-build-rattler-build/src/protocol.rs
@@ -48,7 +48,7 @@ use rattler_build::{
     },
     render::resolved_dependencies::DependencyInfo,
     selectors::SelectorConfig,
-    tool_configuration::{BaseClient, Configuration},
+    tool_configuration::{Configuration, reqwest_client_from_auth_storage},
     variant_config::{ParseErrors, VariantConfig},
 };
 use rattler_conda_types::{
@@ -118,7 +118,7 @@ impl Protocol for RattlerBuildBackend {
 
         let channels = params
             .channel_base_urls
-            .unwrap_or_else(|| vec![Url::from_str("https://prefix.dev/conda-forge").unwrap()]);
+            .unwrap_or_else(|| vec![Url::from_str("https://conda.anaconda.org/conda-forge").unwrap()]);
 
         let discovered_outputs =
             rattler_build_tool.discover_outputs(&params.variant_configuration)?;
@@ -148,8 +148,30 @@ impl Protocol for RattlerBuildBackend {
             build_platform,
         )?;
 
-        let base_client =
-            BaseClient::new(None, None, HashMap::default(), HashMap::default()).unwrap();
+        let base_client = {
+            let config = pixi_config::Config::load_global();
+            let mut config_base = rattler_config::config::ConfigBase::default();
+            config_base.mirrors.extend(config.mirrors.into_iter());
+            config_base.s3_options.0.extend(
+                config.s3_options.into_iter().map(move |(k, v)| {
+                    (k, rattler_config::config::s3::S3Options {
+                        endpoint_url: v.endpoint_url,
+                        region: v.region,
+                        force_path_style: v.force_path_style,
+                    })
+                })
+            );
+            let common = rattler_build::opt::CommonData::from_opts_and_config(
+                rattler_build::opt::CommonOpts::default(),
+                config_base,
+            );
+            reqwest_client_from_auth_storage(
+                None,
+                common.s3_config,
+                common.mirror_config,
+                None,
+            ).into_diagnostic()?
+        };
 
         let tool_config = Configuration::builder()
             .with_opt_cache_dir(self.cache_dir.clone())
@@ -519,7 +541,7 @@ impl Protocol for RattlerBuildBackend {
 
         let channels = params
             .channel_base_urls
-            .unwrap_or_else(|| vec![Url::from_str("https://prefix.dev/conda-forge").unwrap()]);
+            .unwrap_or_else(|| vec![Url::from_str("https://conda.anaconda.org/conda-forge").unwrap()]);
 
         let rattler_build_tool = RattlerBuild::new(
             self.recipe_source.clone(),
@@ -555,8 +577,30 @@ impl Protocol for RattlerBuildBackend {
 
         let mut built = vec![];
 
-        let base_client =
-            BaseClient::new(None, None, HashMap::default(), HashMap::default()).unwrap();
+        let base_client = {
+            let config = pixi_config::Config::load_global();
+            let mut config_base = rattler_config::config::ConfigBase::default();
+            config_base.mirrors.extend(config.mirrors.into_iter());
+            config_base.s3_options.0.extend(
+                config.s3_options.into_iter().map(move |(k, v)| {
+                    (k, rattler_config::config::s3::S3Options {
+                        endpoint_url: v.endpoint_url,
+                        region: v.region,
+                        force_path_style: v.force_path_style,
+                    })
+                })
+            );
+            let common = rattler_build::opt::CommonData::from_opts_and_config(
+                rattler_build::opt::CommonOpts::default(),
+                config_base,
+            );
+            reqwest_client_from_auth_storage(
+                None,
+                common.s3_config,
+                common.mirror_config,
+                None,
+            ).into_diagnostic()?
+        };
 
         let tool_config = Configuration::builder()
             .with_opt_cache_dir(self.cache_dir.clone())
-- 
2.49.0.windows.1

