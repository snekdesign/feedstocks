From f84bf5988df033aa96273532ecf945ba9c3deace Mon Sep 17 00:00:00 2001
From: snekdesign <104812819+snekdesign@users.noreply.github.com>
Date: Wed, 23 Apr 2025 20:25:13 +0800
Subject: [PATCH] customize

---
 Cargo.lock         | 107 ++++++++++++++++++++++++++++++++++++++++++---
 Cargo.toml         |   5 ++-
 src/config_json.rs |   3 +-
 src/main.rs        |  59 +++++++++++++++++--------
 4 files changed, 146 insertions(+), 28 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index 7116f53..cfe787e 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -22,9 +22,9 @@ checksum = "72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6"
 
 [[package]]
 name = "bitflags"
-version = "2.8.0"
+version = "2.9.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8f68f53c83ab957f72c32642f3868eec03eb974d1fb82e453128456482613d36"
+checksum = "5c8214115b7bf84099f1309324e63141d4c5d7cc26862f97a0a857dbefe165bd"
 
 [[package]]
 name = "cc"
@@ -71,6 +71,7 @@ dependencies = [
  "httpdate",
  "log",
  "pico-args",
+ "rand",
  "tiny_http",
  "ureq",
  "url",
@@ -142,7 +143,19 @@ checksum = "c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7"
 dependencies = [
  "cfg-if",
  "libc",
- "wasi",
+ "wasi 0.11.0+wasi-snapshot-preview1",
+]
+
+[[package]]
+name = "getrandom"
+version = "0.3.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "73fea8450eea4bac3940448fb7ae50d91f034f941199fcd9d909a5a07aa455f0"
+dependencies = [
+ "cfg-if",
+ "libc",
+ "r-efi",
+ "wasi 0.14.2+wasi-0.2.4",
 ]
 
 [[package]]
@@ -292,9 +305,9 @@ dependencies = [
 
 [[package]]
 name = "libc"
-version = "0.2.169"
+version = "0.2.171"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b5aba8db14291edd000dfcc4d620c7ebfb122c613afb886ca8803fa4e128a20a"
+checksum = "c19937216e9d3aa9956d9bb8dfc0b0c8beb6058fc4f7a4dc4d850edf86a237d6"
 
 [[package]]
 name = "litemap"
@@ -341,6 +354,15 @@ version = "0.5.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "5be167a7af36ee22fe3115051bc51f6e6c7054c9348e28deb4f49bd6f705a315"
 
+[[package]]
+name = "ppv-lite86"
+version = "0.2.21"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "85eae3c4ed2f50dcfe72643da4befc30deadb458a9b590d720cde2f2b1e97da9"
+dependencies = [
+ "zerocopy",
+]
+
 [[package]]
 name = "proc-macro2"
 version = "1.0.93"
@@ -359,6 +381,41 @@ dependencies = [
  "proc-macro2",
 ]
 
+[[package]]
+name = "r-efi"
+version = "5.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "74765f6d916ee2faa39bc8e68e4f3ed8949b48cccdac59983d287a7cb71ce9c5"
+
+[[package]]
+name = "rand"
+version = "0.9.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9fbfd9d094a40bf3ae768db9361049ace4c0e04a4fd6b359518bd7b73a73dd97"
+dependencies = [
+ "rand_chacha",
+ "rand_core",
+]
+
+[[package]]
+name = "rand_chacha"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d3022b5f1df60f26e1ffddd6c66e8aa15de382ae63b3a0c1bfc0e4d3e3f325cb"
+dependencies = [
+ "ppv-lite86",
+ "rand_core",
+]
+
+[[package]]
+name = "rand_core"
+version = "0.9.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "99d9a13982dcf210057a8a78572b2217b667c3beacbf3a0d8b454f6f82837d38"
+dependencies = [
+ "getrandom 0.3.2",
+]
+
 [[package]]
 name = "ring"
 version = "0.17.9"
@@ -367,7 +424,7 @@ checksum = "e75ec5e92c4d8aede845126adc388046234541629e76029599ed35a003c7ed24"
 dependencies = [
  "cc",
  "cfg-if",
- "getrandom",
+ "getrandom 0.2.15",
  "libc",
  "untrusted",
  "windows-sys 0.52.0",
@@ -605,6 +662,15 @@ version = "0.11.0+wasi-snapshot-preview1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"
 
+[[package]]
+name = "wasi"
+version = "0.14.2+wasi-0.2.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9683f9a5a998d873c0d21fcbe3c083009670149a8fab228644b8bd36b2c48cb3"
+dependencies = [
+ "wit-bindgen-rt",
+]
+
 [[package]]
 name = "webpki-roots"
 version = "0.26.8"
@@ -696,6 +762,15 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"
 
+[[package]]
+name = "wit-bindgen-rt"
+version = "0.39.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6f42320e61fe2cfd34354ecb597f86f413484a798ba44a8ca1165c58d42da6c1"
+dependencies = [
+ "bitflags",
+]
+
 [[package]]
 name = "write16"
 version = "1.0.0"
@@ -732,6 +807,26 @@ dependencies = [
  "synstructure",
 ]
 
+[[package]]
+name = "zerocopy"
+version = "0.8.24"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2586fea28e186957ef732a5f8b3be2da217d65c5969d4b1e17f973ebbe876879"
+dependencies = [
+ "zerocopy-derive",
+]
+
+[[package]]
+name = "zerocopy-derive"
+version = "0.8.24"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a996a8f63c5c4448cd959ac1bab0aaa3306ccfd060472f85943ee0750f0169be"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
 [[package]]
 name = "zerofrom"
 version = "0.1.5"
diff --git a/Cargo.toml b/Cargo.toml
index 470ac52..3ff3186 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -22,7 +22,10 @@ ureq = "2.12"
 pico-args = { version = "0.5", features = ["combined-flags"] }
 log = "0.4"
 env_logger = { version = "0.11", default-features = false }
+rand = "0.9.1"
 
 [profile.release]
+codegen-units = 1
 lto = true
-strip = "debuginfo"
+opt-level = 3
+strip = true
diff --git a/src/config_json.rs b/src/config_json.rs
index 341e6a8..8eb37c4 100644
--- a/src/config_json.rs
+++ b/src/config_json.rs
@@ -22,7 +22,6 @@ pub(super) fn gen_config_json_file(config: &ProxyConfig) -> String {
 
     // Cargo can not handle trailing slashes in `config.json`.
     let dl = dl_url.as_str().trim_end_matches('/');
-    let api = config.upstream_url.as_str().trim_end_matches('/');
 
-    format!(r#"{{"dl":"{dl}","api":"{api}"}}"#)
+    format!(r#"{{"dl":"{dl}","api":"https://crates.io"}}"#)
 }
diff --git a/src/main.rs b/src/main.rs
index 89ae3f7..1e9bf65 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -39,7 +39,7 @@ use pico_args::Arguments;
 
 use env_logger::{Builder as LogBuilder, Env as LogEnv};
 use log::{debug, error, info, warn};
-
+use rand::seq::IteratorRandom;
 use tiny_http::{Header, Method, Request, Response, Server};
 use url::Url;
 
@@ -103,10 +103,10 @@ const HTTP_USER_AGENT: &str = concat!("crates-io-proxy/", env!("CARGO_PKG_VERSIO
 #[derive(Debug, Clone)]
 struct ProxyConfig {
     /// Upstream registry index URL (defaults to [`INDEX_CRATES_IO_URL`])
-    index_url: Url,
+    index_url: Vec<Url>,
 
     /// Upstream crate download URL (defaults to [`CRATES_IO_URL`])
-    upstream_url: Url,
+    upstream_url: Vec<Url>,
 
     /// External URL of this proxy server (defaults to [`DEFAULT_PROXY_URL`])
     proxy_url: Url,
@@ -366,7 +366,10 @@ fn send_fetch_error_response(request: Request, error: Box<ureq::Error>) {
 fn forward_download_request(request: Request, crate_info: CrateInfo, config: ProxyConfig) {
     let thread_name = format!("worker-fetch-crate-{}", crate_info.name());
 
-    let thread_proc = move || match download_crate(&config.upstream_url, &crate_info) {
+    let thread_proc = move || match download_crate(
+        &config.upstream_url.iter().choose(&mut rand::rng()).unwrap(),
+        &crate_info,
+    ) {
         Ok(data) => {
             info!("fetch: successfully downloaded {crate_info}");
             cache_store_crate(&config.crates_dir, &crate_info, &data);
@@ -398,7 +401,10 @@ fn forward_index_request(
     // Select where the new HTTP request headers will come from.
     let req_entry = cached_entry.unwrap_or_else(|| entry.clone());
 
-    let thread_proc = move || match download_index_entry(&config.index_url, req_entry) {
+    let thread_proc = move || match download_index_entry(
+        &config.index_url.iter().choose(&mut rand::rng()).unwrap(),
+        req_entry,
+    ) {
         Ok(response) => {
             // Check for HTTP 200 or HTTP 304 statuses.
             if response.status == 200 {
@@ -568,6 +574,7 @@ enum ListenAddress {
     /// IP address + port
     SocketAddr(String),
     /// Unix domain socket path
+    #[cfg(unix)]
     UnixPath(String),
 }
 
@@ -578,6 +585,7 @@ fn main_loop(listen_addr: &ListenAddress, config: &ProxyConfig) -> ! {
             info!("proxy: starting HTTP server at: {addr}");
             Server::http(addr).expect("failed to start the HTTP server")
         }
+        #[cfg(unix)]
         ListenAddress::UnixPath(path) => {
             info!("proxy: starting HTTP server at Unix socket {path}");
             let path = Path::new(path);
@@ -626,6 +634,7 @@ fn usage() {
     println!("    -h, --help                 print help and exit");
     println!("    -V, --version              print version and exit");
     println!("    -L, --listen ADDRESS:PORT  address and port to listen at (0.0.0.0:3080)");
+    #[cfg(unix)]
     println!("        --listen-unix PATH     Unix domain socket path to listen at");
     println!("    -U, --upstream-url URL     upstream download URL (https://crates.io/)");
     println!("    -I, --index-url URL        upstream index URL (https://index.crates.io/)");
@@ -670,6 +679,7 @@ fn main() {
         verbose += 1;
     }
 
+    #[cfg(unix)]
     let listen_addr_unix = args
         .opt_value_from_str("--listen-unix")
         .expect("bad listen socket path");
@@ -679,15 +689,19 @@ fn main() {
         .expect("bad listen address argument")
         .unwrap_or_else(|| LISTEN_ADDRESS.to_string());
 
-    let index_url_string = args
-        .opt_value_from_str(["-I", "--index-url"])
-        .expect("bad upstream index URL argument")
-        .unwrap_or(index_crates_io_url);
+    let mut index_urls = args
+        .values_from_str(["-I", "--index-url"])
+        .expect("bad upstream index URL argument");
+    if index_urls.is_empty() {
+        index_urls.push(index_crates_io_url);
+    }
 
-    let upstream_url_string = args
-        .opt_value_from_str(["-U", "--upstream-url"])
-        .expect("bad upstream download URL argument")
-        .unwrap_or(crates_io_url);
+    let mut upstream_urls = args
+        .values_from_str(["-U", "--upstream-url"])
+        .expect("bad upstream download URL argument");
+    if upstream_urls.is_empty() {
+        upstream_urls.push(crates_io_url);
+    }
 
     let proxy_url_string = args
         .opt_value_from_str(["-S", "--proxy-url"])
@@ -713,13 +727,17 @@ fn main() {
 
     LogBuilder::from_env(LogEnv::new().default_filter_or(loglevel)).init();
 
-    let index_url = Url::parse(&index_url_string).expect("invalid upstream URL format");
-
-    info!("proxy: using upstream index URL: {index_url}");
-
-    let upstream_url = Url::parse(&upstream_url_string).expect("invalid upstream URL format");
+    let index_url = index_urls.iter().map(|index_url_string| {
+        let index_url = Url::parse(&index_url_string).expect("invalid upstream URL format");
+        info!("proxy: using upstream index URL: {index_url}");
+        index_url
+    }).collect();
 
-    info!("proxy: using upstream download URL: {upstream_url}");
+    let upstream_url = upstream_urls.iter().map(|upstream_url_string| {
+        let upstream_url = Url::parse(&upstream_url_string).expect("invalid upstream URL format");
+        info!("proxy: using upstream download URL: {upstream_url}");
+        upstream_url
+    }).collect();
 
     let proxy_url = Url::parse(&proxy_url_string).expect("invalid proxy URL format");
 
@@ -751,6 +769,9 @@ fn main() {
         cache_ttl,
     };
 
+    #[cfg(not(unix))]
+    let listen_addr = ListenAddress::SocketAddr(listen_addr_ip);
+    #[cfg(unix)]
     let listen_addr = match listen_addr_unix {
         Some(unix_path) => ListenAddress::UnixPath(unix_path),
         None => ListenAddress::SocketAddr(listen_addr_ip),
-- 
2.49.0.windows.1

